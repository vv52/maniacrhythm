edit game manager object to hold note speed w/ persistence

edit loadChart() in Conductor
	read bpm, start delay, etc. from charts
	potentially move to new script(?) loadChart.cs

>	implement custom file extension *.mrc for charts(?)
		NOTE: tested, this works fine
			  it also works with csvToMrc
			  implement after loadChart can read song info

consolidate note*Pressed() methods into notePressed(int noteNum)
	this would be moved into Judgement.cs potentially

move judgement checks to Judgement.cs(?)

move note spawning to new script(?) noteSpawner.cs

7b mode(?)
	3b (s, d, f) + 1b (g or h) + 3b (j, k, l)

rethink 10b mode -> 8b mode(?)
	6b (s, d, f, j, k, l) + 2b (e, i)(?)
	(e, i) half-bar note type

---------------

MRC / note ideas:

add sixth column as such

0.0 t . . . a

possible values:
	
	a - standard note
	b - glide note, requires no timing to hit, only holding the note
	float - hold note for float duration

this offers an easy way to expand note possibilities with little change to format and solves my concerns about handling hold notes

glide note class will be very similar to existing note class except check key press differently

hold note class will be a bit differnet, the length of the hold will be passed in with a constructor ie: new holdNote3(2.0);

the judgement code for hold notes will use GetKeyUp and check it against a float sum of holdNote3.pos and holdNote3.holdLength;

--

Original idea could work too:

	edit MRC to include second float?
	(float1 float2 ch1 ch2 ch3 ch4 /n)
	ie: (0.0 0.5 t f t f) vs (0.0 t f t f)
	add GetKeyUp() checks if float2 > float1

	with the change from 'f' to '.' and the change from 't' to 'a' or 'b' (or maybe 's' for standard and 'g' for glide)

Pros:
	
	this might be slightly simpler to implement and makes for combo note charting a bit simpler
		on that note, an 'h' could also be subbed for 't' such that a hold note,
		a standard note, and a glide note could all be triggered simultaneously

Cons:

	I actually can't think of any, it would be easier to convert chart to this I would think

--

Final idea(??):

(2.5 6.0 h s . g)
(3.0 3.0 . . g .)
(3.5 3.5 . g . .)
(4.0 4.0 . . s s)

very readable, probably (read: hopefully) simple to implement

------------------------------------------------------

COMPLETE:

fix chart pathways in code so that game can build properly

create game manager object to hold judgement value and note speed w/ persistence

convert main() of csvToMrc to a function to allow repeat conversions

build custom *.csv to *.txt converter
	C++ console app
	prompt bpm, start delay, etc.
	prompt excel *.csv
	convert to MRC (proprietary format)
	save as *.txt

change from

0.0 t f f f

to

0.0 t . . .

requires no change as any placeholder other than ',' will work, 'f' is not very legible and makes little sense in retrospect

--
